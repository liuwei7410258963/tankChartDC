package com.oket.tank4station.trace;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.oket.config.spring.SpringUtil;
import com.oket.dispenser.TransientOut;
import com.oket.tank4station.*;
import com.oket.tank4station.dao.DbInventoryAlarmDAO;
import com.oket.tank4station.entity.DbInventoryAlarm;
import com.oket.tank4station.entity.NormalCheck;
import com.oket.tank4station.service.DbInventoryAlarmService;
import com.oket.tank4station.tankchart.TankChartManager;
import com.oket.tank4station.websocket.BizWebSocketServer;
import com.oket.tankchartdc.service.DitService;
import com.oket.util.AirUtils;
import com.oket.util.DoubleUtils;
import io.swagger.models.auth.In;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collectors;

/**
 * @description: 抽象轨迹处理器
 * @author: SunBiaoLong
 * @create: 2020-04-10 10:19
 **/
@Data
@Slf4j
public abstract class AbstractTraceProcessor {

    /**
     * 液位差阈值--单位毫米
     */
    public final static double LEVEL_UP_THRESHOLD = 0.25;
    /**
     * 下降的液位阈值差-单位毫米
     */
    public final static double LEVEL_DOWN_THRESHOLD = -0.25;
    /**
     * 连续性阈值。多少倍的毫米变化率
     */
    public final static double MAX_CONTINUITY = 1.0D;


    /**
     * 液位上传间隔，小于这个值不用做异常检查
     */
    public final static int INVENTORY_UPLOAD_SECONDS = 30;
    /**
     * 夜晚上传分钟间隔，超过和不超过的异常检查不同
     */
    public final static int INVENTORY_UPLOAD_MINUTE = 45;
    /**
     * 两笔液位时间差
     */
    public final static long INVENTORY_ERROR_SECONDS = 1000*60*2;

    /**
     * 连续5次液位异常波动，不再接收液位数据，直到恢复正常
     */
    public final static int ERROR_NUM = 5;

    /**
     * 连续5次稳定段液位正常，恢复接收液位数据
     */
    public final static int NORMAL_NUM = 3;

    /**
     * key罐号，value记录次数
     * 当连续波动液位变化率阈值在100和30之间，且次数大于20时，不再接收液位数据
     */
    public static Map<Integer,Integer> errorMap = new ConcurrentHashMap<>();

    /**
     * key罐号，value记录次数
     *
     */
    public static Map<Integer, NormalCheck> normalMap = new ConcurrentHashMap<>();

    /**
     * key罐号，value罐存数据
     * 上一笔罐存数据
     */
    public static Map<Integer,Inventory> lastInventoryMap = new ConcurrentHashMap<>();



    protected TankSession tankSession;
    /**
     * 液位轨迹
     */
    protected AbstractLevelTrace trace;
    /**
     * 临时变量--临界点使用
     */
    protected AbstractLevelTrace temp;
    /**
     * 处理器是否启动
     */
    protected boolean started = false;

    public AbstractTraceProcessor(AbstractLevelTrace trace, TankSession tankSession) {
        this.trace = trace;
        this.tankSession = tankSession;
    }

    /**
     * 获取液位状态
     *
     * @param inventory
     * @return
     */
    public abstract LevelState checkLevelState(Inventory inventory);

    /**
     * 检查时间
     *
     * @param inventory
     * @return
     * @throws InventoryException
     */
    public boolean checkTime(Inventory inventory) throws InventoryException {
        if (inventory != null && inventory.getTime() != null) {

            /*
             * 异常液位判断逻辑条件
             * 一、当前液位时间为空，或液位时间小于等于前一笔液位时间，丢弃数据
             * 二、两笔液位在2分钟之内
             *  1.液位高度差小于0.2
             *    体积差小于20 正常
             *    体积差大于等于20  异常
             *   2.液位高度差大于0.2
             *     2.1液位变化率大于30且不在付油和卸油中
             *        记录一次异常次数，当次数大于20时，不再接收数据
             *     2.2液位变化率小于等于30 正常
             *        当异常次数大于20，开始判断正常液位条数，如果连续正常超过10条，则清除异常次数，恢复接收液位
             *        当异常次数小于20，直接清空异常次数
             */
            if (trace.getLastLevel() != null) {
//                毫秒不计入
                if (trace.getLastLevel().getTime().getTime()/1000>= inventory.getTime().getTime()/1000) {
                    throw new InventoryException("无效的液位时间，小于等于前一笔液位时间，last：" + trace.getLastLevel().getTime().toLocaleString()
                            + ";inv:" + inventory.getTime().toLocaleString());
                }

                int tankNo = inventory.getTankNo();

                //波动过大且连续已经超过3次，开始判断是否恢复正常
                if(errorMap.containsKey(tankNo) && errorMap.get(tankNo)>=ERROR_NUM) {
                    if(!normalMap.containsKey(tankNo)){
                        NormalCheck normalCheck = new NormalCheck();
                        normalCheck.setFlag(true);
                        normalCheck.setNormalNum(0);
                        normalMap.put(tankNo,normalCheck);
                    }
                    else {
                        NormalCheck normalCheck = normalMap.get(tankNo);
                        if(normalCheck.getNormalNum()>=NORMAL_NUM){
                            errorMap.remove(tankNo);
                            normalMap.remove(tankNo);
                            return true;
                        }
                    }
                    if(!tankSession.isOnFueling()) {
                        if (!lastInventoryMap.containsKey(tankNo)) {
                            lastInventoryMap.put(tankNo, inventory);
                        } else {
                            Inventory lastInventory = lastInventoryMap.get(tankNo);
                            NormalCheck normalCheck = normalMap.get(tankNo);
                            //两笔数据在2分钟内，保证连续
                            if (inventory.getTime().getTime() - lastInventory.getTime().getTime() <= INVENTORY_ERROR_SECONDS) {
                                if (Math.abs(inventory.getLevel() - lastInventory.getLevel()) <= 0.2) {
                                    if (Math.abs(inventory.getVolume() - lastInventory.getVolume()) <= 20) {
                                        if(normalCheck.getFlag()!=false){
                                            normalCheck.setFlag(true);
                                        }
                                    }
                                    else{
                                        normalCheck.setFlag(false);
                                        normalCheck.setNormalNum(0);
                                    }
                                }
                                else{
                                    normalCheck.setFlag(false);
                                    normalCheck.setNormalNum(0);
                                }
                            }
                            else{
                                normalCheck.setFlag(false);
                                normalCheck.setNormalNum(0);
                            }
                        }
                        lastInventoryMap.put(tankNo, inventory);
                    }
                    else{
                        NormalCheck normalCheck = normalMap.get(tankNo);
                        if(normalCheck.getFlag() && !normalCheck.getAddNormalNum()){
                            normalCheck.setNormalNum(normalCheck.getNormalNum()+1);
                            normalCheck.setAddNormalNum(true);
                        }
                    }
                }
                //波动过大没过3次，开始判断是否异常
                else {
                    TransientOut transientOut = trace.getCurrentNozzleFuelingMap().get(tankNo);
                    double rate = DoubleUtils.div(inventory.getVolume() - trace.getLastLevel().getVolume(), inventory.getLevel() - trace.getLastLevel().getLevel());
                    //两笔数据在2分钟内，保证连续
                    if (inventory.getTime().getTime() - trace.getLastLevel().getTime().getTime() <= INVENTORY_ERROR_SECONDS) {
                        //dit传的异常数据，液位高度骤降直接丢弃，不是波动过大所以不用记录errorMap
                        if (Math.abs(inventory.getLevel() - trace.getLastLevel().getLevel()) >= 700) {
                            throw new InventoryException("dit传的异常数据，液位高度骤降" + inventory);
                        }
                        //dit传的异常数据，液位高度不变，体积突增直接丢弃，不是波动过大所以不用记录errorMap
                        else if (Math.abs(rate) > 100) {
                            throw new InventoryException("dit传的异常数据，液位高度不变，体积突增" + inventory);
                        }
                        if (Math.abs(inventory.getLevel() - trace.getLastLevel().getLevel()) <= 0.2) {
                            //异常
                            if (Math.abs(inventory.getVolume() - trace.getLastLevel().getVolume()) > 20) {
                                throw new InventoryException("无效的罐存:高度差小于0.2,体积差大于等于20" + inventory);
                            }
                            //正常 将开始存储正常数据，到达阈值后恢复接收液位
                            else {
                                //清除errorMap，重新判断
                                if (errorMap.containsKey(tankNo) && errorMap.get(tankNo) < ERROR_NUM) {
                                    clearErrorMap(inventory, tankNo, "液位异常波动结束，没超过3次阈值，清除异常次数");
                                }
                            }
                        }
                        //高度大于0.2
                        else {
                            //在卸油或付油中
                            if (trace.isOnUnloading() || (AirUtils.hv(transientOut) && transientOut.isOnFueling())) {
                                //变化率异常
                                if (rate >= 30) {
                                    if (!errorMap.containsKey(tankNo)) {
                                        errorMap.put(tankNo, 0);
                                    }
                                    errorMap.put(tankNo, errorMap.get(tankNo) + 1);
                                    log.info("该液位波动过大，记录一次，当前次数" + errorMap.get(tankNo));
                                    throw new InventoryException("无效的罐存:高度差大于0.2, 液位变化率大于30" + inventory);
                                }
                                //变化率正常  将开始存储正常数据，到达阈值后恢复接收液位
                                else {
                                    //清除errorMap，重新判断
                                    if (errorMap.containsKey(tankNo) && errorMap.get(tankNo) < ERROR_NUM) {
                                        clearErrorMap(inventory, tankNo, "液位异常波动结束，没超过3次阈值，清除异常次数");
                                    }
                                }
                            } else {
                                //不在卸油或付油中，液位变化超过0.3，记录一次
                                if (!errorMap.containsKey(tankNo)) {
                                    errorMap.put(tankNo, 0);
                                }
                                errorMap.put(tankNo, errorMap.get(tankNo) + 1);
                                log.info("不在卸油或付油中，液位变化超过0.3，记录一次，当前次数" + errorMap.get(tankNo));
                            }
                        }
                    }
                }
                //波动过大且连续 超过3次，丢弃数据
                if(errorMap.containsKey(tankNo) && errorMap.get(tankNo)>=ERROR_NUM){
                    QueryWrapper queryWrapper = getQueryWrapper(tankNo);
                    DbInventoryAlarm dbAlarm = SpringUtil.getBean(DbInventoryAlarmDAO.class).selectOne(queryWrapper);
                    if(AirUtils.hv(dbAlarm)){
                    }
                    else{
                        DbInventoryAlarm alarm = new DbInventoryAlarm();
                        alarm.init(inventory);
                        alarm.setSumOut(trace.getSumOut());
                        alarm.setType(DbInventoryAlarm.ERROR_WAVING);
                        alarm.setTraceId(trace.getId());
                        SpringUtil.getBean(DbInventoryAlarmDAO.class).insert(alarm);
                        SpringUtil.getBean(BizWebSocketServer.class).sendMessageAlarm(alarm);
                    }
                    throw new InventoryException("无效的罐存:液位波动过大且超过3次，不再保存" + inventory);
                }
            } else {
                //毫秒不计入
                if (trace.getFirstLevel().getTime().getTime()/1000 >= inventory.getTime().getTime()/1000) {
                    throw new InventoryException("无效的液位时间，小于等于第一笔液位时间,first：" + trace.getFirstLevel().getTime().toLocaleString()
                            + ";inv:" + inventory.getTime().toLocaleString());
                }
            }
        } else {
            throw new InventoryException("无效的罐存:" + inventory);
        }
        return true;
    }

    private QueryWrapper getQueryWrapper(int tankNo) {
        QueryWrapper queryWrapper = new QueryWrapper();
        queryWrapper.eq("type", 4);
        queryWrapper.eq("tank_no", tankNo);
        queryWrapper.isNull("end_time");
        queryWrapper.orderByDesc("start_time");
        queryWrapper.last("limit 1");
        return queryWrapper;
    }

    private void clearErrorMap(Inventory inventory, int tankNo, String s) {
        log.info(s);
        errorMap.remove(tankNo);
        QueryWrapper queryWrapper = getQueryWrapper(tankNo);
        DbInventoryAlarm dbAlarm = SpringUtil.getBean(DbInventoryAlarmDAO.class).selectOne(queryWrapper);
        if (AirUtils.hv(dbAlarm)) {
            dbAlarm.setEndAlarm(inventory);
            SpringUtil.getBean(DbInventoryAlarmDAO.class).updateById(dbAlarm);
            SpringUtil.getBean(BizWebSocketServer.class).sendMessageAlarm(dbAlarm);
        }
    }

    /**
     * 检查连续性
     * |SumFV-sumV|<=3Δmv
     *
     * @param lastTankInventory
     * @param currentTankInventory
     * @return
     */
    public boolean checkContinuity(TankInventory lastTankInventory, TankInventory currentTankInventory) {
        if (lastTankInventory != null && currentTankInventory != null) {
            double diff = Math.abs(trace.getSumNozzleOut()
                    - Math.abs(currentTankInventory.getVolume() - currentTankInventory.getVolume()));
            double mmChangeRate =
                    TankChartManager.mmChangeRate(
                            lastTankInventory
                            , currentTankInventory);
            if (diff <= MAX_CONTINUITY * mmChangeRate) {
                return true;
            } else {
                return false;
            }
        }
        return true;
    }

    public boolean check(TankInventory currentTankInventory) {
        if (trace.getLevelState().equals(LevelState.NEW)) {
            return false;
        }

        TankInventory lastTankInventory = trace.getLastLevel();

        long min = currentTankInventory.getTime().getTime() - lastTankInventory.getTime().getTime();
        min = min / 1000 / 60;
        if (min < 45) {
            final boolean continuity = checkContinuity(trace.getFirstLevel(), currentTankInventory);
            if (!continuity) {
                //保存上一笔异常记录
                saveInventoryAlarm(lastTankInventory, currentTankInventory);
                //创建新的轨迹
                return true;
            }
        } else {
            if (currentTankInventory.getLevel() < lastTankInventory.getLevel()) {
                checkContinuity(lastTankInventory, currentTankInventory);
            }
        }

        return false;
    }

    /**
     * 保存上一笔异常记录
     */
    public void saveInventoryAlarm(TankInventory lastTankInventory, TankInventory currentTankInventory) {
        log.error("不连续");
        DbInventoryAlarm dbInventoryAlarm = new DbInventoryAlarm();
        dbInventoryAlarm.init((Inventory) lastTankInventory);
        dbInventoryAlarm.setType(DbInventoryAlarm.NOT_CONTINUITY);
        dbInventoryAlarm.setEndAlarm((Inventory) currentTankInventory);
        tankSession.addAlarmToNeedPersistence(dbInventoryAlarm);
    }

    /**
     * 获取液位状态
     *
     * @param levelGap
     * @return
     */
    public static LevelState checkLevelState(double levelGap) {
        log.debug("变化量：" + levelGap);
        if (levelGap < LEVEL_DOWN_THRESHOLD) {
            //
            return LevelState.LEVEL_DESCENDING;
        } else if (levelGap > LEVEL_UP_THRESHOLD) {
            return LevelState.LEVEL_ASCENDING;
        } else {
            return LevelState.LEVEL_STABLE;
        }
    }

    /**
     * 开始新的轨迹
     *
     * @param inventory
     * @throws InventoryException
     */
    public void start(Inventory inventory) throws InventoryException {
        trace.addInventory(inventory);
        started = true;
        tankSession.addInventoryToNeedPersistence(inventory, true);
        tankSession.addTraceToNeedPersistence(trace);
    }

    /**
     * 正在进行中处理
     */
    public void processing(Inventory inventory) throws InventoryException {
        trace.addInventory(inventory);
        tankSession.addInventoryToNeedPersistence(inventory, false);
    }

    /**
     * 结束轨迹处理
     *
     * @throws InventoryException
     */
    public void closed() throws InventoryException {
        trace.end();
        tankSession.addTraceToNeedPersistence(trace);
    }

}

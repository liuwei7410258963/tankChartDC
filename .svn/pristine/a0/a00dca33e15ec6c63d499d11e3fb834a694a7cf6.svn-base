package com.oket.util;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.UnsupportedEncodingException;
import java.security.InvalidParameterException;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;

/**
 * @author Administrator
 */

public class StringExUtils extends StringUtils {

	private final static String[] HEX_DIGITS = {"0", "1", "2", "3", "4", "5",
			"6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};
	private static Logger log = LoggerFactory.getLogger(StringExUtils.class);
	public static SimpleDateFormat inventoryDateFormat = new SimpleDateFormat("yyMM");

	public static final String UNDERLINE = "_";
	/**
	 * 转换字节数组为16进制字串
	 *
	 * @param b 字节数组
	 * @return 16进制字串
	 */

	public static String byteArrayToHexString(byte[] b) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++) {
			resultSb.append(byteToHexString(b[i]));
		}
		return resultSb.toString();
	}

	/**
	 * 给字符串每个字符前加3
	 */
	public static String plusCharacter(String str) {
		String str1 = "";
		for (int i = 0; i < str.length(); i++) {
			str1 += "3" + str.substring(i, i + 1);
		}
		return str1;

	}

	/**
	 * 转换字节数组为16进制字串
	 *
	 * @param b 字节数组
	 * @return 16进制字串
	 */

	public static String byteArrayToHexString(byte[] b, int length) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < length; i++) {
			resultSb.append(byteToHexString(b[i]));
		}
		return resultSb.toString();
	}

	public static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n = 256 + n;
		int d1 = n / 16;
		int d2 = n % 16;
		return HEX_DIGITS[d1] + HEX_DIGITS[d2];
	}

	public static byte[] hexStringToByte(String hex) {
		int len = (hex.length() / 2);
		byte[] result = new byte[len];
		char[] achar = hex.toCharArray();
		for (int i = 0; i < len; i++) {
			int pos = i * 2;
			result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));
		}
		return result;
	}

	private static byte toByte(char c) {
		byte b = (byte) "0123456789ABCDEF".indexOf(c);
		return b;
	}

	/**
	 * MD5编码
	 *
	 * @param origin
	 * @return
	 */
	public static String MD5Encode(String origin) {
		String resultString = null;
		try {
			resultString = new String(origin);
			MessageDigest md = MessageDigest.getInstance("MD5");
			resultString = byteArrayToHexString(md.digest(resultString
					.getBytes()));
		} catch (Exception e) {
			log.error("", e);
		}
		return resultString;
	}


	/**
	 * 从,号分割字串中查找是否存在目标字串
	 *
	 * @param srcstr
	 * @param aimstr
	 * @return
	 */
	public static boolean checkExist(String srcstr, String aimstr) {
		if (srcstr == null)
			return false;
		StringTokenizer st = new StringTokenizer(srcstr, ",");
		while (st.hasMoreTokens()) {
			if (st.nextToken().equals(aimstr)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String gb2iso(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("GBK");
			result = new String(tmp, "ISO8859_1");
		} catch (UnsupportedEncodingException e) {
			log.error("convert gb2iso error: ", e);
		}
		return result;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String gb2utf(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("GBK");
			result = new String(tmp, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			log.error("convert gb2utf error: ", e);
		}
		return result;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String iso2gb(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("ISO8859_1");
			result = new String(tmp, "GBK");
		} catch (UnsupportedEncodingException e) {
			log.error("convert iso2gb error: ", e);
		}

		return result;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String iso2utf(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("ISO8859_1");
			result = new String(tmp, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			log.error("convert iso2utf error: ", e);
		}

		return result;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String utf2gb(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("UTF-8");
			result = new String(tmp, "GBK");
		} catch (UnsupportedEncodingException e) {
			log.error("convert utf2gb error: ", e);
		}
		return result;
	}

	/**
	 * 转码
	 *
	 * @param str
	 * @return
	 */
	public static String utf2iso(String str) {
		if (str == null) {
			return "";
		}
		String result = "";
		try {
			byte[] tmp = str.getBytes("UTF-8");
			result = new String(tmp, "ISO8859_1");
		} catch (UnsupportedEncodingException e) {
			log.error("convert utf2iso error: ", e);
		}
		return result;
	}

	/**
	 * @功能: BCD码转为10进制串(阿拉伯数据)
	 * @参数: BCD码
	 * @结果: 10进制串
	 */
	public static String bcd2Str(byte[] bytes) {
		StringBuffer temp = new StringBuffer(bytes.length * 2);
		for (int i = 0; i < bytes.length; i++) {
			temp.append((byte) ((bytes[i] & 0xf0) >>> 4));
			temp.append((byte) (bytes[i] & 0x0f));
		}
		return temp.toString();
	}

	/**
	 * @功能: 10进制串转为BCD码
	 * @参数: 10进制串
	 * @结果: BCD码
	 */
	public static byte[] str2Bcd(String asc) {
		int len = asc.length();
		int mod = len % 2;
		if (mod != 0) {
			asc = "0" + asc;
			len = asc.length();
		}
		byte abt[] = new byte[len];
		if (len >= 2) {
			len = len / 2;
		}
		byte bbt[] = new byte[len];
		abt = asc.getBytes();
		int j, k;
		for (int p = 0; p < asc.length() / 2; p++) {
			if ((abt[2 * p] >= '0') && (abt[2 * p] <= '9')) {
				j = abt[2 * p] - '0';
			} else if ((abt[2 * p] >= 'a') && (abt[2 * p] <= 'z')) {
				j = abt[2 * p] - 'a' + 0x0a;
			} else {
				j = abt[2 * p] - 'A' + 0x0a;
			}
			if ((abt[2 * p + 1] >= '0') && (abt[2 * p + 1] <= '9')) {
				k = abt[2 * p + 1] - '0';
			} else if ((abt[2 * p + 1] >= 'a') && (abt[2 * p + 1] <= 'z')) {
				k = abt[2 * p + 1] - 'a' + 0x0a;
			} else {
				k = abt[2 * p + 1] - 'A' + 0x0a;
			}
			int a = (j << 4) + k;
			byte b = (byte) a;
			bbt[p] = b;
		}
		return bbt;
	}

	/**
	 * bcd字符串转为字节数据
	 *
	 * @param asc
	 * @param bcdLength
	 * @return
	 */
	public static byte[] str2Bcd(String asc, int bcdLength) {
		if (asc.length() > bcdLength) {
			throw new InvalidParameterException("字符串的长度超过了指定bcd的长度：asc：" + asc + ",length:" + bcdLength);
		}
		if (bcdLength % 2 == 1) {
			throw new InvalidParameterException("无效的bcd的长度，bcd长度应该是2的倍数：" + bcdLength);
		}
		while (asc.length() < bcdLength) {
			asc = 0 + asc;
		}
		return str2Bcd(asc);
	}

	/**
	 * 转码
	 *
	 * @return
	 */
	public static String stringToAscii(String value) {
		StringBuffer sbu = new StringBuffer();
		char[] chars = value.toCharArray();
		for (int i = 0; i < chars.length; i++) {
			if (i != chars.length - 1) {
				sbu.append((int) chars[i]).append(",");
			} else {
				sbu.append((int) chars[i]);
			}
		}
		return sbu.toString();
	}

	/**
	 * 转码   STRING为radix进制
	 */
	public static String asciiToString(String value, int radix) {
		StringBuffer sbu = new StringBuffer();
		String[] chars = value.split(",");
		for (int i = 0; i < chars.length; i++) {
			sbu.append((char) Integer.parseInt(chars[i], radix));
		}
		return sbu.toString();
	}

	/**
	 * -----ASCII码转换为16进制 有符号也行-----  192.168.1.222 ---> 3139322E3136382E312E323232
	 *
	 * @param str
	 * @return
	 */
	public static String convertStringToHex(String str) {

		char[] chars = str.toCharArray();

		StringBuffer hex = new StringBuffer();
		for (int i = 0; i < chars.length; i++) {
			hex.append(Integer.toHexString((int) chars[i]));
		}

		return hex.toString();
	}

	/**
	 * ***** 16进制转换为ASCII 有符号也行*****        3139322E3136382E312E323232 ---> 192.168.1.222
	 *
	 * @param hex
	 * @return
	 */
	public static String convertHexToString(String hex) {

		StringBuilder sb = new StringBuilder();
		StringBuilder temp = new StringBuilder();

		//49204c6f7665204a617661 split into two characters 49, 20, 4c...
		for (int i = 0; i < hex.length() - 1; i += 2) {

			//grab the hex in pairs
			String output = hex.substring(i, (i + 2));
			//convert hex to decimal
			int decimal = Integer.parseInt(output, 16);
			//convert the decimal to character
			sb.append((char) decimal);

			temp.append(decimal);
		}

		return sb.toString();
	}

	/**
	 * 给16进制补0
	 *
	 * @param hex 16进制字符串
	 * @param b   多少位
	 */
	public static String fillZeroForHex(String hex, int b) {
		int count = 2 * b - hex.length();
		String str = hex;
		if (count > 0) {
			for (int i = 0; i < count; i++) {
				str = "0" + str;
			}
		}
		return str;
	}

	/**
	 * 数字转成64bit的字符串
	 *
	 * @param number
	 * @return
	 */
	public static String getNBitBinString(long number, int len) {
		StringBuilder sBuilder = new StringBuilder();
		for (int i = 0; i < len; i++) {
			sBuilder.append(number & 1);
			number = number >>> 1;
		}
		return sBuilder.reverse().toString();
	}

	/**
	 * bit字符串转byte
	 *
	 * @param bit
	 * @return
	 */
	public static byte bitToByte(String bit) {
		int re, len;
		if (null == bit) {
			return 0;
		}
		len = bit.length();
		if (len != 4 && len != 8) {
			return 0;
		}
		if (len == 8) {// 8 bit处理
			if (bit.charAt(0) == '0') {// 正数
				re = Integer.parseInt(bit, 2);
			} else {// 负数
				re = Integer.parseInt(bit, 2) - 256;
			}
		} else {//4 bit处理
			re = Integer.parseInt(bit, 2);
		}
		return (byte) re;
	}

	public static void main(String[] args) {
//		System.out
//				.println(StringExUtils
//						.MD5Encode("1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm1234567890-=qwertyuiopasdfghjklzxcvbnm"));

		byte[] bytes = new byte[]{0x08, 0x24, 0x09, 0x14, 0x34, 0x22};
		final String s = bcd2Str(bytes);
		System.out.println(s);

	}

	/**
	 * byte数组转换为二进制字符串,每个字节以","隔开
	 **/
	public static String byteArrToBinStr(byte[] b) {
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < b.length; i++) {
			result.append(Long.toString(b[i] & 0xff, 2) + ",");
		}
		return result.toString().substring(0, result.length() - 1);
	}

	/**
	 * byte数组转换为二进制字符串,每个字节以","隔开
	 **/
	public static String byteToBinStr(byte b) {
		return Long.toString(b & 0xff, 2);
	}
}

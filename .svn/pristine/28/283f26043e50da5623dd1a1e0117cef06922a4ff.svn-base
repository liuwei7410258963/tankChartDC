package com.oket.dispenser.cnpcdit;
/**
 * 命令实现见协议文档《附录A（规范性附件）前庭设备传输要求 》和《DIT协议简明协议》；
 * 此类命令根据《附录A（规范性附件）前庭设备传输要求 》“A4.1通用消息格式”详细定义见“表A.3 字段描述和定义”
 * 接收完整帧字节（以下字节未=为Hex（16进制）） \ 是区分区分符，不是接收到内容
 * 02 01 \ 01 07 \ 00 \ 8F \ 00 0E \ 01      \   21  \    64 00 14 01 05  15 01 01 16 02 00 00\
 * LNAR  \ LNAO  \ MC \M_St\ M_Lg  \DB_Ad_Lg \ DB_Ad \      DATA                              \
 *　LNAR    定义——接收方逻辑节点地址：该字段为消息接收方的 LNA；2字节
 *        协议说明——实际是DIT的地址，在这里一直数据固定即0x02 0x01；
 *　LNAO    定义——发送方逻辑节点地址：该字段为消息发送方的 LNA；2字节
 *        协议说明——实际是我们真正唯一标识(数据源的ID)设备ID，即现场设备发送数据的设备ID；本协议中规定此段的第一字节
 *        是设备类型（子网） 0x01——是指加油机，0x09是指液位仪设备；第二个字节，如果0x01下就是指加油机编号0x07是指7号
 *        加油机，如果是0x09是指液位仪，因为液位仪全部有液位仪控制台，控制台再接各传感器；因此，如果是0x09 第二位就是
 *        固定0x01，即液位消息是指0x09 0x01;
 *　MC       定义——消息代码：用于对通信层接收的数据进行过滤  1字节
 *         协议说明——目前不对此数据应用，目前固定值 0x00；
 *　M_St   定义——消息状态字：定义消息的类型，并且包含令牌（token） 此字段详细定义 见“A.4.2 消息字段定义”中的
 *               “表A.5消息类型编码” 1字节
 *        协议说明—— 此字段1字节，各位含义如下，但实际上我们只实现一种类型消息，即序号5中“不带确认的主动数据的消息”
 *        故此地段内容一般为0x80~0x9F 但有些厂家未实现token 故此字段需要根据不同设备来检查协议实现，此字段的辅助作用用
 *        来实现是否数据丢帧；0x8F是指 10001111 即表示100是下表的序号5的消息类型，即不带确认消息的主动消息
 *   序号   第八位 第7位 第6位    第5~1位            描述
 *    1      0      0     0      token 0~31循环     读消息
 *    2      0      0     1      同上               应答消息
 *    3      0      1     0      同上               写消息
 *    4      0      1     1      同上               带确认的主动数据消息
 *    5      1      0     0      同上               不带确认的主动数据的消息      当前DIT只实现此协议 规划院DIT只主动发送消息到此应用中
 *    6      1      1     1       同上               确认消息
 *　M_Lg    定义——消息长度（注１）：用于指明消息的字节数（数据库、数据）  详细见“A.4.2.2”    2字节
 *        协议说明——是指当前字段结束整个数据字段的长度；例如指令下后续数据长度0x0E 后续是14(十进制)个自己 两字节因此
 *        后续数据最大长度0xFFFF
 *　DB_Ad_Lg 定义——数据库地址长度“详细见A.4.2.3” 定义后续数据库的地址长度   1字节
 *          协议说明——数据库是指设备的各种信息是存在在不同的设备地址，这个设备地址的数据长度一个字节定义，此例子中，
 *          0x01表示数据库地址一个字节，且地址是21；
 * DB_Ad   定义——数据库地址“详细见A.4.2.3 定义” 定义数据库的地址，这个地址可以确定各种数据类型  可以定义1-8个字节
 *           每个字节定义见“表A.6 数据库地址描述和定义”
 *          协议说明——此地址来说明后续设备之间交互数据的内容，详细根据不同类型来确定应用之间交换的数据，此例地址是0x21；
 *          ，其表示数据库地址的一个字节，第一个字节数据，如果02~FF表示应用相关数据类型；
 *DATA　　定义——数据项，定义详细见“A.4.2.4 应用数据（Data）”　数据项会根据不同种类　　
 * 数据项定义格式 DataId 数据Id,Data_Lg 数据长度,Data_El 数据元素 三部分组成，访问数据通过 DB_Ad 和 DataId确定数据
 * 数据元素内容确定见“表A.7数据元素描述格式”
 *　注１、消息长度与数据长度概念一定要区分
 *
 *
 */
final public class IFSFContext4DIT {
    public static final int HEADER_LENGTH = 8;
    /**接收方逻辑地址在头数据地址位置，接收到的第一个地址@ LNAR_POS 访问数据时需要LNAR_POS-1*/
    public static  final int LNAR_POS=1;
    /**发送方逻辑地址在头数据地址位置，接收到的第一个地址@ LNAO 访问数据时需要LNAO-1*/
    public static final int LNAO_POS=3;
    /** 消息代码，此协议镞中固定为应用类代码——00 */
    public static final int MC=00;
    /**MC在头部中的位置*/
    public static final int MC_POS=4;
    /**消息状态字，在头部数据位置*/
    public static final int M_St_POS=5;
    /**不带确认的主动消息 M_St_POS数据字节通过右移5位得到此值*/
    public static final int M_St_Active_NOECHO=0x04;
    public static final int M_St_Valid_Bit=5;

    private byte heads[]=new byte[HEADER_LENGTH];
}
